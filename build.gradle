apply plugin: "java"
sourceCompatibility = 1.6
targetCompatibility = 1.6

group = 'de.erichseifert.vectorgraphics2d'
version = getVersionString()
description = 'A library for adding vector export to Java(R) Graphics2D.'

ext {
    inceptionYear = 2010

    // Determine the location of rt.jar (required for ProGuard)
    if (System.getProperty("os.name").startsWith("Mac")) {
        runtimeJar = "${System.getProperty("java.home")}/bundle/Classes/classes.jar"
    } else {
        runtimeJar = "${System.getProperty("java.home")}/lib/rt.jar"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile(group: "junit", name: "junit", version: "4.11")
    testCompile(group: "org.hamcrest", name: "hamcrest-library", version: "1.3")
    testCompile(group: "org.ghost4j", name: "ghost4j", version: "1.0.0")
    testCompile(group: "batik", name: "batik-transcoder", version: "1.6-1") {
        exclude(group: 'fop', module: 'fop')
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath(group: 'net.sf.proguard', name: 'proguard-gradle', version: '5.2.+')
        classpath(group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: '0.12.1')
    }
}

apply plugin: 'license'
license {
    header(rootProject.file("${projectDir}/src/etc/header.txt"))
    strictCheck(true)
    mapping {
        java = "SLASHSTAR_STYLE"
    }

    def currentYear = new GregorianCalendar().get(Calendar.YEAR);
    ext.year = "${inceptionYear}-${currentYear}"
    ext.owner1 = "Erich Seifert"
    ext.email1 = "dev[at]erichseifert.de"
    ext.owner2 = "Michael Seifert"
    ext.email2 = "mseifert[at]error-reports.org"
}

task shrink(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
    description = 'Uses ProGuard to reduce the code size of this project.'
    group = 'Build'
    // Configure ProGuard
    configuration("${projectDir}/src/etc/proguard.conf")
    target(targetCompatibility.toString())
    injars(jar.archivePath)
    outjars("${libsDir}/shrunk/${jar.archiveName}")
    libraryjars(runtimeJar)
    libraryjars(configurations.runtime)

    doLast {
        // Use the shrunk jar for all further processing
        jar.destinationDir = new File("${libsDir}/shrunk/")
    }
}

task sourceJar(type: Jar) {
    description = 'Assembles a jar archive containing the source code of the main classes.'
    group = 'Build'
    from sourceSets.main.allJava
    classifier 'sources'
}

task javadocJar(type: Jar) {
    description = 'Assembles a jar archive containing the API doc.'
    group = 'Build'
    from javadoc
    classifier 'javadoc'
}

apply plugin: 'maven-publish'
publishing {
    publications {
        vectorgraphics2d(MavenPublication) {
            from components.java
            pom.withXml {
                def root = asNode()
                root.appendNode('inceptionYear', inceptionYear)
                def licenses = root.appendNode('licenses')
                def license = licenses.appendNode('license')
                license.appendNode('name', 'GNU Library or Lesser General Public License (LGPL)')
                license.appendNode('url', 'http://www.gnu.org/licenses/lgpl.txt')
                def scm = root.appendNode('scm')
                scm.appendNode('connection', 'scm:git:git://github.com/eseifert/vectorgraphics2d.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:eseifert/vectorgraphics2d.git')
                def issueManagement = root.appendNode('issueManagement')
                issueManagement.appendNode('system', 'GitHub Issues')
                issueManagement.appendNode('url', 'https://github.com/eseifert/vectorgraphics2d/')
            }
        }
    }
}

/*
 * This method must not be named getVersion, because it would
 * overwrite the implicit getter of the version property in the
 * current Project object.
 */
def getVersionString() {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine('git', 'describe', '--tags')
        standardOutput = out
    }
    return out.toString().trim()
}