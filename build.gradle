apply plugin: 'java'
sourceCompatibility = 1.6
targetCompatibility = 1.6

group = 'de.erichseifert.vectorgraphics2d'
version = getVersionString()
description = 'A library for adding vector export to Java(R) Graphics2D.'

ext {
    inceptionYear = 2010

    id1    = 'eseifert'
    owner1 = 'Erich Seifert'
    email1 = 'dev[at]erichseifert.de'
    id2    = 'mseifert'
    owner2 = 'Michael Seifert'
    email2 = 'mseifert[at]error-reports.org'

    website = 'https://github.com/eseifert/vectorgraphics2d/'

    // Determine the location of rt.jar (required for ProGuard)
    if (System.getProperty('os.name').startsWith('Mac')) {
        runtimeJar = "${System.getProperty("java.home")}/bundle/Classes/classes.jar"
    } else {
        runtimeJar = "${System.getProperty("java.home")}/lib/rt.jar"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile(group: 'junit', name: 'junit', version: '4.11')
    testCompile(group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3')
    testCompile(group: 'org.ghost4j', name: 'ghost4j', version: '1.0.0')
    testCompile(group: 'batik', name: 'batik-transcoder', version: '1.6-1') {
        exclude(group: 'fop', module: 'fop')
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.+'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.+'
    }
}

apply plugin: 'license'
license {
    header(rootProject.file("${projectDir}/src/etc/header.txt"))
    strictCheck(true)
    mapping {
        java = 'SLASHSTAR_STYLE'
    }

    def currentYear = new GregorianCalendar().get(Calendar.YEAR);
    ext.year = "${inceptionYear}-${currentYear}"
}

task shrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
    description = 'Uses ProGuard to reduce the code size of this project.'
    group = 'Build'
    // Configure ProGuard
    configuration("${projectDir}/src/etc/proguard.conf")
    target(targetCompatibility.toString())
    injars(jar.archivePath)
    outjars("${libsDir}/shrunk/${jar.archiveName}")
    libraryjars(runtimeJar)
    libraryjars(configurations.runtime)
}

task sourceJar(type: Jar) {
    description = 'Assembles a jar archive containing the source code of the main classes.'
    group = 'Build'
    from sourceSets.main.allJava
    classifier 'sources'
}

task javadocJar(type: Jar) {
    description = 'Assembles a jar archive containing the API doc.'
    group = 'Build'
    from javadoc
    classifier 'javadoc'
}

apply plugin: 'maven'
apply plugin: 'signing'

artifacts {
    required { hasProperty('signing.keyId') && gradle.taskGraph.hasTask('uploadArchives') }
    archives shrinkJar.getOutJarFileCollection().getSingleFile(), sourceJar, javadocJar
}

signing {

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
            }

            pom.project {
                name rootProject.name
                packaging 'jar'
                description project.description
                url website
                inceptionYear inceptionYear
                licenses {
                    license {
                        name 'GNU Library or Lesser General Public License (LGPL)'
                        url 'http://www.gnu.org/licenses/lgpl.txt'
                    }
                }
                developers {
                    developer {
                        id id1
                        name owner1
                        email email1
                    }
                    developer {
                        id id2
                        name owner2
                        email email2
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/eseifert/vectorgraphics2d.git'
                    developerConnection 'scm:git:git@github.com:eseifert/vectorgraphics2d.git'
                    url website
                }
                issueManagement {
                    system 'GitHub Issues'
                    url website
                }
            }
        }
    }
}
signArchives.dependsOn(shrinkJar)

/*
 * This method must not be named getVersion, because it would
 * overwrite the implicit getter of the version property in the
 * current Project object.
 */
def getVersionString() {
    def out = new ByteArrayOutputStream()
    exec {
        commandLine('git', 'describe', '--tags')
        standardOutput = out
    }
    return out.toString().trim()
}
